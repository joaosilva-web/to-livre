// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Lead {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  interest  Interest
  ip        String
  createdAt DateTime @default(now())
}

enum Interest {
  sim
  nao
  talvez
}

model RateLimit {
  id        Int      @id @default(autoincrement())
  ip        String
  count     Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ip])
}

model Company {
  id            String       @id @default(cuid())
  nomeFantasia  String
  razaoSocial   String?
  cnpjCpf       String       @unique
  endereco      String?
  telefone      String?
  email         String?
  contrato      ContractType @default(FREE)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  users         User[]
  appointments  Appointment[]
  workingHours  WorkingHours[]
  services      Service[]
}

enum ContractType {
  FREE
  PRO
  PREMIUM
  ENTERPRISE
}

model WorkingHours {
  id         String   @id @default(cuid())
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id])
  dayOfWeek  Int      // 0 = Domingo, 6 = Sábado
  openTime   String   // formato HH:mm
  closeTime  String   // formato HH:mm
}

model Service {
  id          String               @id @default(cuid())
  companyId   String
  company     Company              @relation(fields: [companyId], references: [id])
  name        String
  price       Float
  duration    Int                  // em minutos
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  appointments Appointment[]
  professionals ProfessionalService[]
}

model ProfessionalService {
  id             String  @id @default(cuid())
  professionalId String
  serviceId      String

  professional   User    @relation(fields: [professionalId], references: [id])
  service        Service @relation(fields: [serviceId], references: [id])

  @@unique([professionalId, serviceId]) // um profissional não pode ter o mesmo serviço duplicado
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  password      String
  role          Role          @default(OWNER)
  companyId     String?
  company       Company?      @relation(fields: [companyId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  appointments  Appointment[] @relation("UserAppointments")
  services      ProfessionalService[]
}



enum Role {
  OWNER       // Dono/autônomo da empresa
  MANAGER     // Líder/supervisor
  EMPLOYEE    // Funcionário comum
}

model Appointment {
  id             String            @id @default(cuid())
  companyId      String
  company        Company           @relation(fields: [companyId], references: [id])
  professionalId String
  professional   User              @relation("UserAppointments", fields: [professionalId], references: [id])
  clientName     String
  serviceId      String
  service        Service           @relation(fields: [serviceId], references: [id])
  price          Float?
  startTime      DateTime
  endTime        DateTime
  status         AppointmentStatus @default(PENDING)

  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}
